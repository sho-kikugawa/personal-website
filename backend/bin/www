#!/usr/bin/env node

/**
 * Module dependencies.
 */
let fs = require('fs');
let http = require('http');
let https = require('https');
let { app } = require('../app');
const logger = require('../utils/logger').logger

/**
 * Get port from environment and store in Express.
 */
let openPort = normalizePort(process.env.PORT || '3000'); 
let securePort = normalizePort(process.env.HTTPS_PORT || '3001');

/***
 * Attempt to create an HTTPS server. If the certs don't exist, fallback to an
 * HTTP only version (But throw a loud warning)
 */

try {
	const path = require('path');
	const keyFilename = path.join(process.env.TLS_FILES_PATH, process.env.TLS_KEY_FILENAME);
	const certFilename = path.join(process.env.TLS_FILES_PATH, process.env.TLS_CERT_FILENAME);
	if (fs.existsSync(keyFilename) && fs.existsSync(certFilename)) {
		let options = { 
			key: fs.readFileSync(keyFilename),
			cert: fs.readFileSync(certFilename)
		};
		let server = https.createServer(options, app);
		logger.info('Starting https server at port ' + securePort);
		logger.info('Starting http server at port ' + openPort);
		server.listen(securePort, () => {
			logger.info('server started.');
			onListening(server);
		});
		server.on('error', (error) => {onError(error, securePort)});

		// Create HTTP server to redirect requests to HTTPS
		http.createServer((req, res) => {
			const portIdx = req.headers.host.indexOf(':');
			let hostname = req.headers.host;
			if( portIdx > -1) {
				hostname = req.headers.host.substring(0, portIdx);
			}
			res.writeHead(301, {
				location:`https://${hostname}:${securePort}${req.url}`
			})
			res.end();
		}).listen(openPort);
	}
	// HTTP only fallback
	else {
		logger.warn(`THIS SERVER IS BEING RUN IN HTTP ONLY MODE`);
		let server = http.createServer(app);
		logger.info('Starting http server at port ' + openPort)
		server.listen(openPort, () => {
			logger.info('server started.')
			onListening(server);
		});
		server.on('error', (error) => {onError(error, openPort)});
	}
}
catch (err) {
	logger.error(err);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	logger.info('Listening on ' + bind);
}
